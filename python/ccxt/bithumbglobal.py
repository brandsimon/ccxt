# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
import hashlib
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import ArgumentsRequired
from ccxt.base.errors import BadRequest
from ccxt.base.errors import InvalidOrder
from ccxt.base.errors import OrderNotFound
from ccxt.base.decimal_to_precision import DECIMAL_PLACES


class bithumbglobal(Exchange):

    def describe(self):
        return self.deep_extend(super(bithumbglobal, self).describe(), {
            'id': 'bithumbglobal',
            'name': 'Bithumb Global',
            'countries': ['KR'],  # South Korea
            'rateLimit': 500,
            'has': {
                'cancelOrder': True,
                'CORS': True,
                'createMarketOrder': True,
                'createOrder': True,
                'fetchBalance': True,
                'fetchClosedOrders': True,
                'fetchCurrencies': True,
                'fetchMarkets': True,
                'fetchOHLCV': True,
                'fetchOpenOrders': True,
                'fetchOrder': True,
                'fetchOrderBook': True,
                'fetchTicker': True,
                'fetchTickers': True,
                'fetchTrades': True,
                'withdraw': False,
            },
            'urls': {
                'logo': '',
                'api': {
                    'public': 'https://global-openapi.bithumb.pro/openapi/v1',
                    'private': 'https://global-openapi.bithumb.pro/openapi/v1',
                },
                'www': 'https://www.bithumb.pro',
                'doc': 'https://github.com/bithumb-pro/bithumb.pro-official-api-docs/blob/master/rest-api.md',
                'fees': 'https://www.bithumb.pro/en-us/fee',
            },
            'timeframes': {
                '1m': 'm1',
                '3m': 'm3',
                '5m': 'm5',
                '15m': 'm15',
                '30m': 'm30',
                '1h': 'h1',
                '2h': 'h2',
                '4h': 'h4',
                '6h': 'h6',
                '8h': 'h8',
                '12h': 'h12',
                '1d': 'd1',
                '3d': 'd3',
                '7d': 'w1',
                '1M': 'M1',
            },
            'api': {
                'public': {
                    'get': [
                        'spot/config',
                        'spot/orderBook',
                        'spot/ticker',
                        'spot/trades',
                        'spot/kline',
                    ],
                },
                'private': {
                    'post': [
                        'spot/assetList',
                        'spot/cancelOrder',
                        'spot/placeOrder',
                        'spot/singleOrder',
                        'spot/openOrders',
                        'spot/orderList',
                    ],
                },
            },
            'fees': {
                'trading': {
                    'maker': 0.1 / 100,
                    'taker': 0.1 / 100,
                },
            },
            'precisionMode': DECIMAL_PLACES,
            'exceptions': {
                'exact': {
                    # 9002 occurs when there are missing/wrong parameters, the signature does not need to be wrong
                    '9002': BadRequest,  # {"data":null,"code":"9002","msg":"verifySignature failed","timestamp":1597061538013,"startTime":null}
                    '20000': InvalidOrder,  # {"data":null,"code":"20000","msg":"order params error","timestamp":1597064915274,"startTime":null}
                    '20004': OrderNotFound,  # {"data":null,"code":"20004","msg":"order absent","timestamp":1597061829420,"startTime":null}
                    '20012': BadRequest,  # {"data":null,"code":"20012","msg":"cancel failed,order status changed","timestamp":1597065978595,"startTime":null}
                    '20044': InvalidOrder,  # {"data":null,"code":"20044","msg":"quantity accuracy is wrong for placing order","timestamp":1597066179132,"startTime":null}
                },
                'broad': {
                },
            },
            'options': {
                'createMarketBuyOrderRequiresPrice': True,
            },
        })

    def fetch_markets(self, params={}):
        response = self.publicGetSpotConfig(params)
        data = self.safe_value(response, 'data')
        spotConfig = self.safe_value(data, 'spotConfig')
        result = []
        for i in range(0, len(spotConfig)):
            market = spotConfig[i]
            currencyId = self.safe_value(market, 'symbol')
            baseId, quoteId = currencyId.split('-')
            base = self.safe_currency_code(baseId)
            quote = self.safe_currency_code(quoteId)
            symbol = base + '/' + quote
            accuracy = self.safe_value(market, 'accuracy', {})
            result.append({
                'id': currencyId,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'info': market,
                'active': True,
                'precision': {
                    'amount': self.safe_integer(accuracy, 1),
                    'price': self.safe_integer(accuracy, 0),
                },
                'limits': {
                    'amount': {
                        'min': None,
                        'max': None,
                    },
                    'price': {
                        'min': None,
                        'max': None,
                    },
                    'cost': {
                        'min': None,
                        'max': None,
                    },
                },
                'baseId': baseId,
                'quoteId': quoteId,
            })
        return result

    def fetch_currencies(self, params={}):
        response = self.publicGetSpotConfig(params)
        data = self.safe_value(response, 'data')
        coinConfig = self.safe_value(data, 'coinConfig')
        result = {}
        for i in range(0, len(coinConfig)):
            currency = coinConfig[i]
            name = self.safe_string(currency, 'name')
            id = name
            code = self.safe_currency_code(name)
            result[code] = {
                'id': id,
                'numericId': None,
                'code': code,
                'info': currency,
                'name': name,
                'active': self.safe_string(currency, 'depositStatus') == 1,
                'fee': None,
                'precision': None,
                'limits': {
                    'amount': {
                        'min': self.safe_float(currency, 'minTxAmt'),
                        'max': None,
                    },
                    'price': {
                        'min': None,
                        'max': None,
                    },
                    'cost': {
                        'min': None,
                        'max': None,
                    },
                    'withdraw': {
                        'min': self.safe_float(currency, 'minWithdraw'),
                        'max': None,
                    },
                },
            }
        return result

    def fetch_order_book(self, symbol, limit=None, params={}):
        self.load_markets()
        request = {
            'symbol': self.market_id(symbol),
        }
        response = self.publicGetSpotOrderBook(self.extend(request, params))
        data = self.safe_value(response, 'data', {})
        return self.parse_order_book(data, None, 'b', 's', 0, 1)

    def fetch_ticker(self, symbol, params={}):
        self.load_markets()
        ob = self.fetch_order_book(symbol)
        ticker = self.parse_ticker({})
        ticker['bid'] = ob['bids'][0][0]
        ticker['ask'] = ob['asks'][0][0]
        return ticker

    def fetch_tickers(self, symbols=None, params={}):
        self.load_markets()
        request = {}
        if symbols is None:
            request['symbol'] = 'ALL'
        else:
            marketIds = self.market_ids(symbols)
            request['symbol'] = ','.join(marketIds)
        response = self.publicGetSpotTicker(self.extend(request, params))
        return self.parse_tickers(response, symbols)

    def parse_ticker(self, ticker, market=None, timestamp=None):
        symbol = None
        marketId = self.safe_string(ticker, 's')
        if marketId in self.markets_by_id:
            market = self.markets_by_id[marketId]
        if market is not None:
            symbol = market['symbol']
        last = self.safe_float(ticker, 'c')
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': self.safe_float(ticker, 'h'),
            'low': self.safe_float(ticker, 'l'),
            'bid': None,
            'bidVolume': None,
            'ask': None,
            'askVolume': None,
            'vwap': None,
            'open': None,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': self.safe_float(ticker, 'p'),
            'percentage': None,
            'average': None,
            'baseVolume': None,
            'quoteVolume': self.safe_float(ticker, 'vol'),
            'info': ticker,
        }

    def parse_tickers(self, rawTickers, symbols=None):
        tickers = {}
        timestamp = self.safe_integer(rawTickers, 'timestamp')
        data = self.safe_value(rawTickers, 'data', [])
        for i in range(0, len(data)):
            ticker = self.parse_ticker(data[i], None, timestamp)
            tickers[ticker['symbol']] = ticker
        return tickers

    def parse_trade(self, trade, market=None):
        timestamp = self.safe_timestamp(trade, 't')
        side = self.safe_string(trade, 's')
        price = self.safe_float(trade, 'p')
        amount = self.safe_float(trade, 'v')
        cost = price * amount
        symbol = None
        if market is not None:
            symbol = market['symbol']
        return {
            'id': None,
            'order': None,
            'info': trade,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'type': None,
            'side': side,
            'takerOrMaker': None,
            'price': price,
            'amount': amount,
            'cost': cost,
            'fee': None,
        }

    def fetch_trades(self, symbol, since=None, limit=None, params={}):
        self.load_markets()
        market = self.market(symbol)
        id = market['id']
        request = {
            'symbol': id,
        }
        response = self.publicGetSpotTrades(self.extend(request, params))
        data = self.safe_value(response, 'data', [])
        return self.parse_trades(data, market, since, limit)

    def parse_ohlcv(self, ohlcv, market=None):
        return [
            self.safe_timestamp(ohlcv, 'time'),
            self.safe_float(ohlcv, 'o'),
            self.safe_float(ohlcv, 'h'),
            self.safe_float(ohlcv, 'l'),
            self.safe_float(ohlcv, 'c'),
            self.safe_float(ohlcv, 'v'),
        ]

    def fetch_ohlcv(self, symbol, timeframe='1m', since=None, limit=None, params={}):
        self.load_markets()
        market = self.market(symbol)
        duration = self.parse_timeframe(timeframe)
        if limit is None:
            limit = 100
        end = None
        start = None
        if since is None:
            end = self.seconds()
            start = end - duration * limit
        else:
            start = int(since / 1000)
            end = since + duration * limit
        request = {
            'symbol': market['id'],
            'type': self.timeframes[timeframe],
            'start': start,
            'end': end,
        }
        response = self.publicGetSpotKline(self.extend(request, params))
        data = self.safe_value(response, 'data', [])
        return self.parse_ohlcvs(data, market, timeframe, since, limit)

    def fetch_balance(self, params={}):
        self.load_markets()
        request = {
            'assetType': 'spot',
        }
        response = self.privatePostSpotAssetList(self.extend(request, params))
        result = {'info': response}
        balances = self.safe_value(response, 'data')
        for i in range(0, len(balances)):
            balance = balances[i]
            code = self.safe_string(balance, 'coinType')
            account = self.account()
            safeCode = self.safe_currency_code(code)
            account['total'] = self.safe_float(balance, 'count')
            account['used'] = self.safe_float(balance, 'frozen')
            result[safeCode] = account
        return self.parse_balance(result)

    def create_order(self, symbol, type, side, amount, price=None, params={}):
        self.load_markets()
        request = {
            'symbol': self.market_id(symbol),
            'type': type.lower(),
            'side': side.lower(),
        }
        if type == 'limit':
            request['price'] = self.price_to_precision(symbol, price)
            request['quantity'] = self.amount_to_precision(symbol, amount)
        else:
            createMarketBuyOrderRequiresPrice = self.safe_value(self.options, 'createMarketBuyOrderRequiresPrice', True)
            if createMarketBuyOrderRequiresPrice:
                if price is not None:
                    amount = amount * price
                else:
                    raise InvalidOrder(self.id + " createOrder() requires the price argument with market buy orders to calculate total order cost(amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = False and supply the total cost value in the 'amount' argument(the exchange-specific behaviour)")
            request['price'] = '-1'
            request['quantity'] = self.price_to_precision(symbol, amount)
        response = self.privatePostSpotPlaceOrder(self.extend(request, params))
        responseData = self.safe_value(response, 'data', {})
        id = self.safe_string(responseData, 'orderId')
        return {
            'info': response,
            'symbol': symbol,
            'type': type,
            'side': side,
            'id': id,
        }

    def fetch_order(self, id, symbol=None, params={}):
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOrder requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request = {
            'orderId': id,
            'symbol': market['id'],
        }
        response = self.privatePostSpotSingleOrder(self.extend(request, params))
        data = self.safe_value(response, 'data')
        return self.parse_order(data, market)

    def fetch_open_orders(self, symbol=None, since=None, limit=None, params={}):
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOpenOrders requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
            # 'page': 1,  # page count starts with 1
        }
        if limit is not None:
            request['count'] = limit
        response = self.privatePostSpotOpenOrders(self.extend(request, params))
        data = self.safe_value(response, 'data', [])
        list = self.safe_value(data, 'list')
        return self.parse_orders(list, market, since, limit)

    def fetch_closed_orders(self, symbol=None, since=None, limit=None, params={}):
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOpenOrders requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
            'status': 'closed',
            'queryRange': 'thisweek',  # thisweekago
            # 'page': 1,  # page count starts with 1
        }
        if limit is not None:
            request['count'] = limit
        response = self.privatePostSpotOrderList(self.extend(request, params))
        data = self.safe_value(response, 'data', [])
        list = self.safe_value(data, 'list')
        return self.parse_orders(list, market, since, limit)

    def parse_order_status(self, status):
        statuses = {
            'pending': 'open',
            'cancel': 'canceled',
            'success': 'closed',
        }
        return self.safe_string(statuses, status, status)

    def parse_order(self, order, market=None):
        id = self.safe_string(order, 'orderId')
        symbol = self.safe_string(order, 'symbol')
        if market is None:
            market = self.markets_by_id[symbol]
        if market is not None:
            symbol = market['symbol']
        else:
            base = self.safe_currency_code(self.safe_string(order, 'coinType'))
            quote = self.safe_currency_code(self.safe_string(order, 'marketType'))
            symbol = base + '/' + quote
        timestamp = self.safe_integer(order, 'createTime')
        type = self.safe_string(order, 'type')
        side = self.safe_string(order, 'side')
        status = self.parse_order_status(self.safe_string(order, 'status'))
        filled = self.safe_float(order, 'tradedNum')
        price = self.safe_float(order, 'price')
        avgPrice = self.safe_float(order, 'avgPrice')
        amount = None
        if type == 'market':
            amount = self.safe_float(order, 'tradedNum')
        else:
            amount = self.safe_float(order, 'quantity')
            if avgPrice == 0:
                avgPrice = None
        if filled != 0:
            price = avgPrice
        remaining = amount - filled
        return {
            'info': order,
            'id': id,
            'clientOrderId': None,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': None,
            'symbol': symbol,
            'type': type,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': None,
            'average': avgPrice,
            'filled': filled,
            'remaining': remaining,
            'status': status,
            'fee': None,
            'trades': None,
        }

    def cancel_order(self, id, symbol=None, params={}):
        if symbol is None:
            raise ArgumentsRequired(self.id + ' cancelOrder requires a symbol argument')
        self.load_markets()
        request = {
            'orderId': id,
            'symbol': self.market_id(symbol),
        }
        return self.privatePostSpotCancelOrder(self.extend(request, params))

    def nonce(self):
        return self.milliseconds()

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        endpoint = '/' + self.implode_params(path, params)
        url = self.urls['api'][api] + endpoint
        query = self.omit(params, self.extract_params(path))
        if api == 'public':
            if query:
                url += '?' + self.urlencode(query)
        else:
            self.check_required_credentials()
            ts = str(self.nonce())
            query = self.keysort(self.extend({
                'apiKey': self.apiKey,
                'msgNo': ts,
                'timestamp': ts,
                'version': 'v1.0.0',
            }, query))
            urlparams = self.urlencode(query)
            query['signature'] = self.hmac(self.encode(urlparams), self.encode(self.secret), hashlib.sha256)
            body = self.json(query)
            headers = {
                'content-Type': 'application/json',
            }
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody):
        if response is None:
            return  # fallback to default error handler
        if 'code' in response:
            code = self.safe_string(response, 'code')
            message = self.safe_string(response, 'msg')
            if code == '0':
                return  # no error
            feedback = self.id + ' ' + body
            self.throw_exactly_matched_exception(self.exceptions['exact'], code, feedback)
            self.throw_exactly_matched_exception(self.exceptions['broad'], message, feedback)
            raise ExchangeError(feedback)
